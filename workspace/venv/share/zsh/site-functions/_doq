#compdef doq

# AUTOMATICALLY GENERATED by `shtab`


_shtab_doq_commands() {
  local _commands=(
    
  )
  _describe 'doq commands' _commands
}

_shtab_doq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "(- : *)--print-completion[print shell completion script]:print_completion:(bash zsh tcsh)"
  {-f,--file}"[File or STDIN]:file:_files"
  "--start[Start lineno]:start:"
  "--end[End lineno]:end:"
  {-t,--template_path}"[Path to template directory]:template_path:_files -/"
  {-s,--style}"[Output style string or json]:style:"
  "--formatter[Docstring formatter. sphinx,google or numpy]:formatter:"
  "--indent[Indent number]:indent:"
  "--omit[Omit first argument such as self]:omit:"
  {-r,--recursive}"[Run recursively over directories]"
  {-d,--directory}"[Path to directory]:directory:_files -/"
  {-w,--write}"[Edit files in-place]"
  "(- : *)"{-v,--version}"[Output the version number]"
  {-c,--config}"[Path to a setup.cfg or pyproject.toml]:config:_files"
  "--ignore_exception[Ignore exception statements]"
  "--ignore_yield[Ignore yield statements]"
  "--ignore_init[Ignore generate docstring to __init__ method]"
)


_shtab_doq() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_doq_options[(I)${(q)one_or_more}*]} + ${_shtab_doq_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_doq_options+=(': :_shtab_doq_commands' '*::: :->doq')
  fi
  _arguments -C -s $_shtab_doq_options

  case $state in
    doq)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_doq-$line[1]:"
      case $line[1] in
        
      esac
  esac
}



typeset -A opt_args
_shtab_doq "$@"
